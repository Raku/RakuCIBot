use Test;
use Test::Mock;
use DB;
use Red:api<2>;
use Log::Async;

use Config;
use GitHubCITestRequester;
use GitHubInterface;
use CITestSetManager;

set-config($*PROGRAM.parent.add("data/config-test.yml"));
logger.untapped-ok = True;

# Fast, in memory, ephemeral DB.
red-defaults("SQLite");
DB::create-schema();
#my $*RED-DEBUG = True;
#my $*RED-DEBUG-RESPONSE = True;

# Disable background worklist processing. Makes the tests reproducible.
my $*SERIAL_DEDUP_NO_THREADING = True;


my $tsm = mocked(CITestSetManager);
my $interface = mocked(GitHubInterface,
    returning => {
        retrieve-pulls => (
            {
                last-cursor => "5312453151",
                prs => (
                    GitHubCITestRequester::PRTask.new(
                        repo         => "rakudo",
                        head-branch  => "feature-1",
                        base-url     => "https://github.com/rakudo/rakudo.git",
                        head-url     => "https://github.com/rakudo/rakudo.git",
                        number       => 1,
                        title        => "Some feature",
                        body         => "Add this nice feature",
                        state        => GitHubCITestRequester::PR_OPEN,
                        user-url     => 'https://github.com/rakudo/rakudo/pull/1',
                        comments     => (
                            GitHubCITestRequester::PRCommentTask.new(
                                id         => "037531",
                                created-at => "2021-10-10T14:58:23",
                                updated-at => "2021-10-10T14:58:23",
                                pr-number  => 1,
                                pr-repo    => "rakudo",
                                author     => "patrickbkr",
                                user-url   => 'https://github.com/rakudo/rakudo/pull/1#issuecomment-939398255',
                                body       => "LGTM. Let's do this!"
                            ),
                        ),
                        commit-task  => GitHubCITestRequester::PRCommitTask.new(
                            repo       => "rakudo",
                            pr-number  => 1,
                            commit-sha => "739f80ae46ea9cd8a640473cba22a23c435f1cde",
                            user-url   => "https://github.com/rakudo/rakudo/pull/1/commits/739f80ae46ea9cd8a640473cba22a23c435f1cde",
                        ),
                    ),
                )
            }
        ),
        retrieve-default-branch-commits => (
            {
                last-cursor => "5312453151",
                commits => (
                    GitHubCITestRequester::CommitTask.new:
                        repo => "rakudo",
                        commit-sha   => "24530154210531240531243510c35135241053412",
                        user-url     => "https://github.com/rakudo/rakudo/commit/24530154210531240531243510c35135241053412",
                        git-url      => "https://github.com/rakudo/rakudo.git",
                        branch       => "master",
                    ;
                )
            }
        )
    });

my GitHubCITestRequester $requester .= new:
    testset-manager => $tsm,
    github-interface => $interface,
;

$requester.poll-for-changes;

check-mock($interface,
    *.called("retrieve-pulls", :3times)
);
check-mock($interface,
    *.called("retrieve-default-branch-commits", :3times)
);

is DB::CITestSet.^all.elems, 2, "Right number of test sets created";

my @pr-ts = DB::CITestSet.^all.grep(*.commit-sha eq "739f80ae46ea9cd8a640473cba22a23c435f1cde");
is @pr-ts.elems, 1, "CITestSet is created";
is @pr-ts[0].commit-sha, "739f80ae46ea9cd8a640473cba22a23c435f1cde", "PR CITestSet references the right commit";
is @pr-ts[0].event-type, DB::PR, "PR CITestSet event-type is correct";

my @commit-ts = DB::CITestSet.^all.grep(*.commit-sha eq "24530154210531240531243510c35135241053412");
is @commit-ts.elems, 1, "Commit CITestSet is created";
is @commit-ts[0].commit-sha, "24530154210531240531243510c35135241053412", "Commit CITestSet references the right commit";
is @commit-ts[0].event-type, DB::MAIN_BRANCH, "Commit CITestSet event-type is correct";

check-mock($tsm,
    *.called("add-test-set", with => :(:$test-set, :$source-spec))
);

done-testing;
