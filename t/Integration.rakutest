use Test;
use Test::Mock;
use Red:api<2>;
use File::Temp;
use Log::Async;

use DB;
use Config;
use GitHubInterface;
use GitHubCITestRequester;
use CITestSetManager;
use OBSInterface;
use OBS;
use SourceArchiveCreator;
use FlapperDetector;

set-config($*PROGRAM.parent.add("data/config-test.yml"));
logger.untapped-ok = True;

my $work-dir = (%*ENV<RCI_TEST_WORK_DIR> // tempdir()).IO;

# In memory, ephemeral DB.
red-defaults("SQLite");
DB::create-db();
#my $*RED-DEBUG = True;
#my $*RED-DEBUG-RESPONSE = True;

# Disable background worklist processing. Makes the tests reproducible.
my $*SERIAL_DEDUP_NO_THREADING = True;

my $dummy-src-id = "some dummy id";
my $dummy-src-path = "/some/path";
my $dummy-log = "Build Succeeded! Yay!";

my $flapper-detector = mocked(FlapperDetector,
    returning => {
        is-flapper => False,
    }
);

my $github-interface = mocked(GitHubInterface,
    returning => {
        create-check-run => 1528,
    }
);
my $obs-interface = mocked(OBSInterface,
    returning => {
        build-log => $dummy-log,
        sources => (
        OBSInterface::OBSSource.new(
            name  => "PTS-ID-1",
            md5   => "132c30c59034d993b3252795d6eb1824",
            size  => 256790,
            mtime => 1609676194,
            ),
        )
    },
    computing => {
        builds => {
            state $c = -1; $c++;
            $c == 0 ?? (
            OBSInterface::OBSResult.new(
                project    => "home:patrickbkr:raku-ci",
                repository => "openSUSE_Leap_15.3",
                arch       => "x86_64",
                code       => "published",
                state      => "published",
                status     => { moarvm        => "building",
                                nqp-moarvm    => "building",
                                rakudo-moarvm => "building" }),
            )
            !! (
            OBSInterface::OBSResult.new(
                project    => "home:patrickbkr:raku-ci",
                repository => "openSUSE_Leap_15.3",
                arch       => "x86_64",
                code       => "published",
                state      => "published",
                status     => { moarvm        => "succeeded",
                                nqp-moarvm    => "succeeded",
                                rakudo-moarvm => "succeeded" }),
            )
        }
    },
);

my $source-archive-creator = mocked(SourceArchiveCreator,
    returning => {
        create-archive   => $dummy-src-id,
        get-archive-path => $dummy-src-path,
    }
);

my CITestSetManager $testset-manager .= new:
    :$source-archive-creator,
    :$flapper-detector,
;

my GitHubCITestRequester $requester .= new:
    :$testset-manager,
    :$github-interface,
;
$testset-manager.register-status-listener($requester);

my OBS $obs .= new:
    :$source-archive-creator,
    :$work-dir,
    interface => $obs-interface,
    :$testset-manager,
;
$testset-manager.register-test-set-listener($obs);

$requester.add-task: GitHubCITestRequester::PRTask.new:
    repo         => "rakudo",
    number       => 4574,
    title        => "[JVM] Restore pre-new-disp behaviour for phasers",
    body         => "Lalala hie a hiea.",
    state        => GitHubCITestRequester::PR_OPEN,
    head-branch  => "jvm_phasers_new-disp",
    base-url     => "https://github.com/rakudo/rakudo.git",
    head-url     => "https://github.com/usev6/rakudo.git",
    user-url     => "https://github.com/rakudo/rakudo/pull/4574",
    commit-task  => GitHubCITestRequester::PRCommitTask.new(
        repo         => "rakudo",
        pr-number    => 4574,
        commit-sha   => "9ca813b7c4c8e429eb4da637aefd953f89f8af22",
        user-url     => "https://github.com/patrickbkr/GitHub-API-Testing/pull/4574/commits/9ca813b7c4c8e429eb4da637aefd953f89f8af22",
    ),
;

check-mock($obs-interface,
    *.called("upload-file", with => :("moarvm", $, *%), :3times),
    *.called("commit", with => :("moarvm")),
    *.called("upload-file", with => :("nqp-moarvm", $, *%), :3times),
    *.called("commit", with => :("nqp-moarvm")),
    *.called("upload-file", with => :("rakudo-moarvm", $, *%), :3times),
    *.called("commit", with => :("rakudo-moarvm")),
    *.called("builds", :1times),
);

check-mock($github-interface,
    *.called("create-check-run", with => :(
        :$id!,
        Str:D :$name!,
        :$owner! where "rakudo",
        :$repo!  where "rakudo",
        :$sha!   where "9ca813b7c4c8e429eb4da637aefd953f89f8af22",
        DateTime:D :$started-at!,
        :$status! where "in_progress",
        :$url!,
    ))
);

$obs.process-worklist();
check-mock($github-interface,
    *.called("update-check-run", with => :(
        :$owner! where "rakudo",
        :$repo!  where "rakudo",
        :$check-run-id! where 1528,
        :$status! where "completed",
        DateTime:D :$completed-at!,
        :$conclusion! where "success",
    ))
);

done-testing;
