use Test;
use Test::Mock;
use Log::Async;

use Config;
use SourceArchiveCreator;
use CITestStatusListener;
use CITestSetManager;
use FlapperDetector;
use DB;
use Red:api<2>;

set-config($*PROGRAM.parent.add("data/config-test.yml"));
logger.untapped-ok = True;

# Fast, in memory, ephemeral DB.
red-defaults("SQLite");
DB::create-db();
#my $*RED-DEBUG = True;

# Disable background worklist processing. Makes the tests more reliable.
my $*SERIAL_DEDUP_NO_THREADING = True;

### Mocks
# cp = CI platform
my $flapper-detector = mocked(FlapperDetector,
    returning => {
        is-flapper => False,
    }
);

class TestCIPlatform {
    has $.test-set;
    method new-test-set($!test-set) {}
}

class TestCITestStatusListener does CITestStatusListener {
    has @.new-tests;
    has @.changed-tests;
    method tests-queued(@tests) {
        @!new-tests.append: @tests;
    }

    method test-status-changed($test) {
        @!changed-tests.append: $test;
    }

    method test-set-done($) {
        ...
    }

    method command-accepted($) {
        ...
    }
}

my $dummy-id = "some dummy id";

class TestSourceArchiveCreator {
    method create-archive(SourceSpec $source-spec --> Str) {
        return $dummy-id;
    }
}

my $cp = TestCIPlatform.new;
my $sac = TestSourceArchiveCreator.new;
# gh = Github
my $gh = TestCITestStatusListener.new;

my CITestSetManager $tsm .= new:
    source-archive-creator => $sac,
    :$flapper-detector,
;

### Register the listeners
$tsm.register-test-set-listener: $cp;
$tsm.register-status-listener: $gh;


### Testing starts here
my SourceSpec $source-spec .= new:
rakudo-commit-sha => '0123456789012345678901234567890123456789',
nqp-commit-sha    => '0123456789012345678901234567890123456789',
moar-commit-sha   => '0123456789012345678901234567890123456789',
;
### Adding a new test set
my $test-set = DB::CITestSet.^create:
    event-type => DB::MAIN_BRANCH,
    project => DB::RAKUDO,
    git-url => "https://github.com/rakudo/rakudo.git",
    user-url => "https://github.com/rakudo/rakudo/commit/0123456789012345678901234567890123456789",
    commit-sha => '0123456789012345678901234567890123456789',
;

$tsm.add-test-set(:$test-set, :$source-spec);

$test-set.^refresh;

is $test-set.status, DB::WAITING_FOR_TEST_RESULTS, "TestSet was processed";

ok $cp.test-set, "Adding a test set notifies the CI platforms";
is $cp.test-set.source-archive-id, $dummy-id, "Adding a test forwards the source archive id";

### Adding test suites
my $test = DB::CITest.new: :name("Linux-x86");
$tsm.add-tests($test);
is $gh.new-tests.elems, 1, "New tests are forwarded to the Status listeners";
is $gh.new-tests[0], $test, "New tests are forwarded to the Status listeners";

### Updating test status
$tsm.test-status-updated($test);
is $gh.changed-tests.elems, 1, "Status updates are forwarded to the status listeners";
is $gh.changed-tests[0], $test, "Status updates are forwarded to the status listeners";

done-testing;
