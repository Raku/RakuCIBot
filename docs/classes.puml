@startuml

class CITestSetManager {
    register-status-listener($status-listener)
    register-test-set-listener($test-set-listener)
    ..
    process-worklist()
    ..
    add-test-set($test-set, :$source-spec)
    add-tests(@tests)
    ..
    test-status-updated($test)
}

note top of CITestSetManager
    Guides the test process. Makes sure
    no test set is either forgotten or
    evaluated multiple times.
end note


class SourceArchiveCreator {
    create-archive(:$source-spec --> :$source-archive-id)
}


class SourceSpec {
    has $rakudo-repo
    has $rakudo-commit-sha
    has $nqp-repo
    has $nqp-commit-sha
    has $moar-repo
    has $moar-commit-sha
}

SourceSpec --> SourceArchiveCreator


note top of SourceArchiveCreator
    Creates source archives and provides
    access to them. Makes sure no source
    state is created more than once.
end note


interface CITestSetListener {
    new-test-set($test-set)
}

CITestSetListener --> CITestSetManager


class OBSCIPlatformConnector {
    process-hook()
    !process-new-tests()
    !process-running-tests()
}
OBSCIPlatformConnector --|> CITestSetListener

note top of OBSCIPlatformConnector: Implementation of CIPlatformConnector


class AzureCIPlatformConnector {
    process-hook()
    !process-new-tests()
    !process-running-tests()
}
AzureCIPlatformConnector --|> CITestSetListener

note top of AzureCIPlatformConnector: Implementation of CIPlatformConnector


interface CITestStatusListener {
    tests-queued(@tests)
    test-status-changed($test)
}

CITestStatusListener --> CITestSetManager

note top of CITestStatusListener
    Implementers can receive status
    change events from the `CITestSetManager`
end note


class GithubCITestRequester {
    new-re-test-command(:$project, :$pr-number, :$comment-id, :$user-url)
    process-hook(:$request)
    !determine-source-spec(:$project, :$repo, :$commit-sha --> SourceSpec)
}

GithubCITestRequester --|> CITestStatusListener

@enduml
